

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1)
from output import *
from Crypto.Util.number import long_to_bytes, bytes_to_long

P = PolynomialRing(ZZ, names=('x',)); (x,) = P._first_ngens(1)

i = _sage_const_0 
found = False
while not found:
	_leak = leak + i * n

	for p, _ in (x**_sage_const_4  - x**_sage_const_3  - _leak * x**_sage_const_2  - n * x + n**_sage_const_2 ).roots():
		if n % p == _sage_const_0 :
			q = n // p
			flag = long_to_bytes(pow(bytes_to_long(ciph), inverse_mod(e, (p-_sage_const_1 )*(q-_sage_const_1 )), n))
			print(flag)
			found = True
			break
	i += _sage_const_1 

